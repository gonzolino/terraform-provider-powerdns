// Code generated by go-swagger; DO NOT EDIT.

package zonecryptokey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zonecryptokey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zonecryptokey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCryptokey(params *CreateCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCryptokeyCreated, error)

	DeleteCryptokey(params *DeleteCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCryptokeyNoContent, error)

	GetCryptokey(params *GetCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCryptokeyOK, error)

	ListCryptokeys(params *ListCryptokeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCryptokeysOK, error)

	ModifyCryptokey(params *ModifyCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyCryptokeyNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCryptokey creates a cryptokey

  This method adds a new key to a zone. The key can either be generated or imported by supplying the content parameter. if content, bits and algo are null, a key will be generated based on the default-ksk-algorithm and default-ksk-size settings for a KSK and the default-zsk-algorithm and default-zsk-size options for a ZSK.
*/
func (a *Client) CreateCryptokey(params *CreateCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCryptokeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCryptokeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCryptokey",
		Method:             "POST",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/cryptokeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCryptokeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCryptokeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCryptokey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCryptokey this method deletes a key specified by cryptokey id
*/
func (a *Client) DeleteCryptokey(params *DeleteCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCryptokeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCryptokeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCryptokey",
		Method:             "DELETE",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCryptokeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCryptokeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCryptokey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCryptokey returns all data about the crypto key including the privatekey
*/
func (a *Client) GetCryptokey(params *GetCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCryptokeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCryptokeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCryptokey",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCryptokeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCryptokeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCryptokey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCryptokeys gets all crypto keys for a zone except the privatekey
*/
func (a *Client) ListCryptokeys(params *ListCryptokeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCryptokeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCryptokeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCryptokeys",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/cryptokeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCryptokeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCryptokeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCryptokeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ModifyCryptokey this method de activates a key from zone name specified by cryptokey id
*/
func (a *Client) ModifyCryptokey(params *ModifyCryptokeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyCryptokeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyCryptokeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyCryptokey",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyCryptokeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyCryptokeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyCryptokey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
