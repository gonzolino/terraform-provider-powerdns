// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetStatsParams creates a new GetStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetStatsParams() *GetStatsParams {
	return &GetStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetStatsParamsWithTimeout creates a new GetStatsParams object
// with the ability to set a timeout on a request.
func NewGetStatsParamsWithTimeout(timeout time.Duration) *GetStatsParams {
	return &GetStatsParams{
		timeout: timeout,
	}
}

// NewGetStatsParamsWithContext creates a new GetStatsParams object
// with the ability to set a context for a request.
func NewGetStatsParamsWithContext(ctx context.Context) *GetStatsParams {
	return &GetStatsParams{
		Context: ctx,
	}
}

// NewGetStatsParamsWithHTTPClient creates a new GetStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetStatsParamsWithHTTPClient(client *http.Client) *GetStatsParams {
	return &GetStatsParams{
		HTTPClient: client,
	}
}

/* GetStatsParams contains all the parameters to send to the API endpoint
   for the get stats operation.

   Typically these are written to a http.Request.
*/
type GetStatsParams struct {

	/* Includerings.

	   “true” (default) or “false”, whether to include the Ring items, which can contain thousands of log messages or queried domains. Setting this to ”false” may make the response a lot smaller.

	   Default: true
	*/
	Includerings *bool

	/* ServerID.

	   The id of the server to retrieve
	*/
	ServerID string

	/* Statistic.

	     When set to the name of a specific statistic, only this value is returned.
	If no statistic with that name exists, the response has a 422 status and an error message.

	*/
	Statistic *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStatsParams) WithDefaults() *GetStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStatsParams) SetDefaults() {
	var (
		includeringsDefault = bool(true)
	)

	val := GetStatsParams{
		Includerings: &includeringsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get stats params
func (o *GetStatsParams) WithTimeout(timeout time.Duration) *GetStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stats params
func (o *GetStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stats params
func (o *GetStatsParams) WithContext(ctx context.Context) *GetStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stats params
func (o *GetStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stats params
func (o *GetStatsParams) WithHTTPClient(client *http.Client) *GetStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stats params
func (o *GetStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncluderings adds the includerings to the get stats params
func (o *GetStatsParams) WithIncluderings(includerings *bool) *GetStatsParams {
	o.SetIncluderings(includerings)
	return o
}

// SetIncluderings adds the includerings to the get stats params
func (o *GetStatsParams) SetIncluderings(includerings *bool) {
	o.Includerings = includerings
}

// WithServerID adds the serverID to the get stats params
func (o *GetStatsParams) WithServerID(serverID string) *GetStatsParams {
	o.SetServerID(serverID)
	return o
}

// SetServerID adds the serverId to the get stats params
func (o *GetStatsParams) SetServerID(serverID string) {
	o.ServerID = serverID
}

// WithStatistic adds the statistic to the get stats params
func (o *GetStatsParams) WithStatistic(statistic *string) *GetStatsParams {
	o.SetStatistic(statistic)
	return o
}

// SetStatistic adds the statistic to the get stats params
func (o *GetStatsParams) SetStatistic(statistic *string) {
	o.Statistic = statistic
}

// WriteToRequest writes these params to a swagger request
func (o *GetStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Includerings != nil {

		// query param includerings
		var qrIncluderings bool

		if o.Includerings != nil {
			qrIncluderings = *o.Includerings
		}
		qIncluderings := swag.FormatBool(qrIncluderings)
		if qIncluderings != "" {

			if err := r.SetQueryParam("includerings", qIncluderings); err != nil {
				return err
			}
		}
	}

	// path param server_id
	if err := r.SetPathParam("server_id", o.ServerID); err != nil {
		return err
	}

	if o.Statistic != nil {

		// query param statistic
		var qrStatistic string

		if o.Statistic != nil {
			qrStatistic = *o.Statistic
		}
		qStatistic := qrStatistic
		if qStatistic != "" {

			if err := r.SetQueryParam("statistic", qStatistic); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
