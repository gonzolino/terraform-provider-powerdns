// Code generated by go-swagger; DO NOT EDIT.

package tsigkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tsigkey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tsigkey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTSIGKey(params *CreateTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTSIGKeyCreated, error)

	DeleteTSIGKey(params *DeleteTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTSIGKeyNoContent, error)

	GetTSIGKey(params *GetTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTSIGKeyOK, error)

	ListTSIGKeys(params *ListTSIGKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTSIGKeysOK, error)

	PutTSIGKey(params *PutTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutTSIGKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTSIGKey adds a t s i g key

  This methods add a new TSIGKey. The actual key can be generated by the server or be provided by the client
*/
func (a *Client) CreateTSIGKey(params *CreateTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTSIGKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTSIGKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTSIGKey",
		Method:             "POST",
		PathPattern:        "/servers/{server_id}/tsigkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTSIGKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTSIGKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTSIGKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTSIGKey deletes the t s i g key with tsigkey id
*/
func (a *Client) DeleteTSIGKey(params *DeleteTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTSIGKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTSIGKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTSIGKey",
		Method:             "DELETE",
		PathPattern:        "/servers/{server_id}/tsigkeys/{tsigkey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTSIGKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTSIGKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTSIGKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTSIGKey gets a specific t s i g keys on the server including the actual key
*/
func (a *Client) GetTSIGKey(params *GetTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTSIGKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTSIGKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTSIGKey",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/tsigkeys/{tsigkey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTSIGKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTSIGKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTSIGKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTSIGKeys gets all t s i g keys on the server except the actual key
*/
func (a *Client) ListTSIGKeys(params *ListTSIGKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTSIGKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTSIGKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTSIGKeys",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/tsigkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTSIGKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTSIGKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTSIGKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutTSIGKey The TSIGKey at tsigkey_id can be changed in multiple ways:
 * Changing the Name, this will remove the key with tsigkey_id after adding.
 * Changing the Algorithm
 * Changing the Key

Only the relevant fields have to be provided in the request body.

*/
func (a *Client) PutTSIGKey(params *PutTSIGKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutTSIGKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTSIGKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putTSIGKey",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/tsigkeys/{tsigkey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTSIGKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTSIGKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putTSIGKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
