// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cryptokey Cryptokey
//
// Describes a DNSSEC cryptographic key
//
// swagger:model Cryptokey
type Cryptokey struct {

	// Whether or not the key is in active use
	Active bool `json:"active,omitempty"`

	// The name of the algorithm of the key, should be a mnemonic
	Algorithm string `json:"algorithm,omitempty"`

	// The size of the key
	Bits int64 `json:"bits,omitempty"`

	// An array of DS records for this key, filtered by CDS publication settings
	Cds []string `json:"cds"`

	// The DNSKEY record for this key
	Dnskey string `json:"dnskey,omitempty"`

	// An array of DS records for this key
	Ds []string `json:"ds"`

	// The internal identifier, read only
	ID int64 `json:"id,omitempty"`

	// keytype
	// Enum: [ksk zsk csk]
	Keytype string `json:"keytype,omitempty"`

	// The private key in ISC format
	Privatekey string `json:"privatekey,omitempty"`

	// Whether or not the DNSKEY record is published in the zone
	Published bool `json:"published,omitempty"`

	// set to "Cryptokey"
	Type string `json:"type,omitempty"`
}

// Validate validates this cryptokey
func (m *Cryptokey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeytype(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cryptokeyTypeKeytypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ksk","zsk","csk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cryptokeyTypeKeytypePropEnum = append(cryptokeyTypeKeytypePropEnum, v)
	}
}

const (

	// CryptokeyKeytypeKsk captures enum value "ksk"
	CryptokeyKeytypeKsk string = "ksk"

	// CryptokeyKeytypeZsk captures enum value "zsk"
	CryptokeyKeytypeZsk string = "zsk"

	// CryptokeyKeytypeCsk captures enum value "csk"
	CryptokeyKeytypeCsk string = "csk"
)

// prop value enum
func (m *Cryptokey) validateKeytypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cryptokeyTypeKeytypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Cryptokey) validateKeytype(formats strfmt.Registry) error {
	if swag.IsZero(m.Keytype) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeytypeEnum("keytype", "body", m.Keytype); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cryptokey based on context it is used
func (m *Cryptokey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Cryptokey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cryptokey) UnmarshalBinary(b []byte) error {
	var res Cryptokey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
